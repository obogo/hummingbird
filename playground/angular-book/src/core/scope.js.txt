/* global helpers, validators, formatters */
var Scope = (function () {
    'use strict';

    var forEach = helpers.forEach;

    function every(list, predicate) {
        var returnVal = true;
        var i = 0, len = list.length;
        while (i < len) {
            if (!predicate(list[i])) {
                returnVal = false;
            }
            i += 1;
        }
        return returnVal;
    }

    function initWatchVal() {
    }

    function Scope() {
        var self = this;
        self.$$watchers = [];
        self.$$lastDirtyWatch = null;
        self.$$asyncQueue = [];
        self.$$postDigestQueue = [];
        self.$$root = self;
        self.$$children = [];
        self.$$listeners = {};
        self.$$phase = null;
    }

    var scopePrototype = Scope.prototype;
    scopePrototype.$watch = function (watchFn, listenerFn, deep) {
        var self = this;
        var watcher = {
            watchFn: watchFn,
            listenerFn: listenerFn || function () {
            },
            deep: !!deep,
            last: initWatchVal
        };
        self.$$watchers.unshift(watcher);
        self.$$root.$$lastDirtyWatch = null;
        self.$$lastDirtyWatch = null;
        return function () {
            var index = self.$$watchers.indexOf(watcher);
            if (index >= 0) {
                self.$$watchers.splice(index, 1);
                self.$$root.$$lastDirtyWatch = null;
            }
        };
    };


    scopePrototype.$$digestOnce = function () {
        var dirty;
        var continueLoop = true;
        var self = this;
        var reverse = true;
        self.$$everyScope(function (scope) {
            var newValue, oldValue;
            forEach(scope.$$watchers, function (watcher) {
                try {
                    if (watcher) {
                        newValue = watcher.watchFn(scope);
                        oldValue = watcher.last;
                        if (!scope.$$areEqual(newValue, oldValue, watcher.deep)) {
                            scope.$$root.$$lastDirtyWatch = watcher;
                            watcher.last = (watcher.deep ? JSON.stringify(newValue) : newValue);
                            watcher.listenerFn(newValue, (oldValue === initWatchVal ? newValue : oldValue), scope);
                            dirty = true;
                        } else if (scope.$$root.$$lastDirtyWatch === watcher) {
                            continueLoop = false;
                            return false;
                        }
                    }
                } catch (e) {
                    console.error(e);
                }
            }, null, reverse);
            return continueLoop;
        });
        return dirty;
    };

    scopePrototype.$digest = function () {
        var ttl = 10;
        var dirty;
        var self = this;
        self.$$root.$$lastDirtyWatch = null;
        self.$beginPhase('$digest');
        do {
            while (self.$$asyncQueue.length) {
                try {
                    var asyncTask = self.$$asyncQueue.shift();
                    asyncTask.scope.$eval(asyncTask.expression);
                } catch (e) {
                    console.error(e);
                }
            }

            dirty = self.$$digestOnce();

            if ((dirty || self.$$asyncQueue.length) && !(ttl--)) {
                self.$clearPhase();
                throw '10 digest iterations reached';
            }
        } while (dirty || self.$$asyncQueue.length);

        while (self.$$postDigestQueue.length) {
            try {
                self.$$postDigestQueue.shift()();
            } catch (e) {
                console.error(e);
            }
        }

        self.$clearPhase();
    };

    scopePrototype.$$areEqual = function (newValue, oldValue, deep) {
        if (deep) {
            return JSON.stringify(newValue) === oldValue;
        }
        return newValue === oldValue ||
            (typeof newValue === 'number' && typeof oldValue === 'number' &&
                isNaN(newValue) && isNaN(oldValue));
    };

    scopePrototype.$eval = function (expr, locals) {
        return expr(this, locals);
    };

    scopePrototype.$apply = function (expr) {
        var self = this;
        try {
            self.$beginPhase('$apply');
            return self.$eval(expr);
        } finally {
            self.$clearPhase();
            self.$$root.$digest();
        }
    };

    scopePrototype.$evalAsync = function (expr) {
        var self = this;
        if (!self.$$phase && !self.$$asyncQueue.length) {
            setTimeout(function () {
                if (self.$$asyncQueue.length) {
                    self.$$root.$digest();
                }
            }, 0);
        }
        self.$$asyncQueue.push({scope: self, expression: expr});
    };

    scopePrototype.$beginPhase = function (phase) {
        var self = this;
        if (self.$$phase) {
            throw self.$$phase + ' already in progress.';

        }
        self.$$phase = phase;
    };

    scopePrototype.$clearPhase = function () {
        this.$$phase = null;
    };

    scopePrototype.$$postDigest = function (fn) {
        this.$$postDigestQueue.push(fn);
    };

    scopePrototype.$new = function (isolated) {
        var child, self = this;
        if (isolated) {
            child = new Scope();
            child.$$root = self.$$root;
            child.$$asyncQueue = self.$$asyncQueue;
            child.$$postDigestQueue = self.$$postDigestQueue;
        } else {
            var ChildScope = function () {
            };
            ChildScope.prototype = self;
            child = new ChildScope();
        }
        self.$$children.push(child);
        child.$$watchers = [];
        child.$$listeners = {};
        child.$$children = [];
        child.$parent = self;
        return child;
    };

    scopePrototype.$$everyScope = function (fn) {
        var self = this;
        if (fn(self)) {
            return every(self.$$children, function (child) {
                return child.$$everyScope(fn);
            });
        } else {
            return false;
        }
    };

    scopePrototype.$destroy = function () {
        var self = this;
        if (self === self.$$root) {
            return;
        }
        var siblings = self.$parent.$$children;
        var indexOfThis = siblings.indexOf(self);
        if (indexOfThis >= 0) {
            self.$broadcast('$destroy');
            siblings.splice(indexOfThis, 1);
        }
    };

    scopePrototype.$on = function (eventName, listener) {
        var self = this;
        var listeners = self.$$listeners[eventName];
        if (!listeners) {
            self.$$listeners[eventName] = listeners = [];
        }
        listeners.push(listener);
        return function () {
            var index = listeners.indexOf(listener);
            if (index >= 0) {
                listeners[index] = null;
            }
        };
    };

    scopePrototype.$emit = function (eventName) {
        var self = this;
        var propagationStopped = false;
        var event = {
            name: eventName,
            targetScope: self,
            stopPropagation: function () {
                propagationStopped = true;
            },
            preventDefault: function () {
                event.defaultPrevented = true;
            }
        };
        var additionalArgs = formatters.toArgsArray(arguments);
        additionalArgs.shift();
        var listenerArgs = [event].concat(additionalArgs);
        var scope = self;
        do {
            event.currentScope = scope;
            scope.$$fireEventOnScope(eventName, listenerArgs);
            scope = scope.$parent;
        } while (scope && !propagationStopped);
        return event;
    };

    scopePrototype.$broadcast = function (eventName) {
        var self = this;
        var event = {
            name: eventName,
            targetScope: self,
            preventDefault: function () {
                event.defaultPrevented = true;
            }
        };
        var additionalArgs = formatters.toArgsArray(arguments);
        additionalArgs.shift();
        var listenerArgs = [event].concat(additionalArgs);
        self.$$everyScope(function (scope) {
            event.currentScope = scope;
            scope.$$fireEventOnScope(eventName, listenerArgs);
            return true;
        });
        return event;
    };

    scopePrototype.$$fireEventOnScope = function (eventName, listenerArgs) {
        var listeners = this.$$listeners[eventName] || [];
        var i = 0;
        while (i < listeners.length) {
            if (listeners[i] === null) {
                listeners.splice(i, 1);
            } else {
                try {
                    listeners[i].apply(null, listenerArgs);
                } catch (e) {
                    console.error(e);
                }
                i++;
            }
        }
        return event;
    };

    return Scope;

})();